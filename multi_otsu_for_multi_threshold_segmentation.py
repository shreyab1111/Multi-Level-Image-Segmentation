# -*- coding: utf-8 -*-
"""Multi_Otsu for multi-threshold segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iQd3wOsSvyLUb8iF4RHGCQSu0W7tIqHC

Normal Otsu
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import os, time, cv2
from skimage import data
from skimage.filters import threshold_multiotsu

# Setting the font size for all plots.
#matplotlib.rcParams['font.size'] = 9

'''image = cv2.imread('/content/drive/MyDrive/Dataset/Standard_images_Copy/Copy of cameraman.tif',0)
start = time.time()
# Applying multi-Otsu threshold for the default value, generating three classes.
thresholds = threshold_multiotsu(image,3)
print(thresholds)
print('\n')
end = time.time()
print(end-start)
print('\n\n')'''

thresh = [2,3,4,5,6]
img_list = '/content/drive/MyDrive/Dataset/Standard_images_Copy/'
for img_name in os.listdir(img_list):
  print("Image Name " + str(img_name))
  image = cv2.imread(img_list+img_name,0)
  for threshold in thresh:
    start = time.time()
    # Applying multi-Otsu threshold for the default value, generating three classes.
    thresholds = threshold_multiotsu(image,threshold)
    print(thresholds)
    print('\n')
    end = time.time()
    print(end-start)
    print('\n\n')
'''
for i in thresholds:
  ret, thresh1 = cv2.threshold(image, i, 255, cv2.THRESH_BINARY)        
  cv2_imshow(thresh1)'''

"""Faster Otsu"""

import cv2
import numpy as np
import math

img = cv2.imread('/content/drive/MyDrive/standard_test_images/peppers_gray.tif',0)

a = 0
b = 255
n = 6 # number of thresholds (better choose even value)
k = 0.7 # free variable to take any positive value
T = [] # list which will contain 'n' thresholds

def sujoy(img, a, b):
    if a>b:
        s=-1
        m=-1
        return m,s

    img = np.array(img)
    t1 = (img>=a)
    t2 = (img<=b)
    X = np.multiply(t1,t2)
    Y = np.multiply(img,X)
    s = np.sum(X)
    m = np.sum(Y)/s
    return m,s

for i in range(int(n/2-1)):
    img = np.array(img)
    t1 = (img>=a)
    t2 = (img<=b)
    X = np.multiply(t1,t2)
    Y = np.multiply(img,X)
    mu = np.sum(Y)/np.sum(X)

    Z = Y - mu
    Z = np.multiply(Z,X)
    W = np.multiply(Z,Z)
    sigma = math.sqrt(np.sum(W)/np.sum(X))

    T1 = mu - k*sigma
    T2 = mu + k*sigma

    x, y = sujoy(img, a, T1)
    w, z = sujoy(img, T2, b)

    T.append(int(x))
    T.append(int(w))

    a = T1+1
    b = T2-1
    k = k*(i+1)

T1 = mu
T2 = mu+1
x, y = sujoy(img, a, T1)
w, z = sujoy(img, T2, b)    
T.append(int(x))
T.append(int(w))
T.sort()
print(T)